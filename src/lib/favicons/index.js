"use strict";const through2=require("through2"),clone=require("clone"),mergeDefaults=require("lodash.defaultsdeep"),configDefaults=require("require-directory")(module,"config"),helpers=require("./helpers.js"),path=require("path"),File=require("vinyl"),toIco=require("to-ico");function favicons(e,t={},n){if(n)return favicons(e,t).then((e=>n(null,e))).catch(n);t=mergeDefaults(t,configDefaults.defaults);const r=clone(configDefaults),o=helpers(t);function s(e,t,n,r){if(".ico"===path.extname(n))return Promise.all(t.sizes.map((({width:n,height:o})=>s(e,Object.assign({},t,{width:n,height:o}),`${n}x${o}.png`,r)))).then((e=>toIco(e.map((({contents:e})=>e))).then((e=>({name:n,contents:e})))));const i=Math.max(t.width,t.height),c=Math.round(i/100*r.offset)||0,a=Object.assign({},t,r);return a.transparent=!a.background||"transparent"===a.background,Promise.all([o.Images.create(a),o.Images.render(e,a,c)]).then((([e,t])=>o.Images.composite(e,t,a,c,i))).then((e=>({name:n,contents:e})))}function i(e){return Promise.all((r.html[e]||[]).map(o.HTML.render))}function c(e){return Promise.all(Object.keys(r.files[e]||{}).map((t=>o.Files.create(r.files[e][t],t))))}function a(e,n){const i=o.General.preparePlatformOptions(n),c=Array.isArray(t.icons[n])?t.icons[n].reduce(((e,t)=>(n in r.icons&&t in r.icons[n]&&(e[t]=r.icons[n][t]),e)),{}):r.icons[n];return Promise.all(Object.keys(c||{}).map((t=>s(e,r.icons[n][t],t,i))))}function u(e,t){return Promise.all([a(e,t),c(t),i(t)])}return o.General.source(e).then((async function(e){const n=[],r=Object.keys(t.icons).filter((e=>t.icons[e])).sort(((e,t)=>"favicons"===e?-1:"favicons"===t?1:e.localeCompare(t)));for(const t of r)n.push(await u(e,t));return{images:[].concat(...n.map((e=>e[0]))),files:[].concat(...n.map((e=>e[1]))),html:[].concat(...n.map((e=>e[2])))}}))}function stream(e,t){return through2.obj((function(n,r,o){if(n.isNull())return o(null,n);if(n.isStream())return o(new Error("Streaming not supported"));const{html:s,pipeHTML:i,...c}=e;favicons(n.contents,c).then((({images:e,files:n,html:r})=>{for(const t of[...e,...n])this.push(new File({path:t.name,contents:Buffer.isBuffer(t.contents)?t.contents:Buffer.from(t.contents)}));t&&t(r),i&&this.push(new File({path:s,contents:Buffer.from(r.join("\n"))})),o(null)})).catch(o)}))}module.exports=favicons,module.exports.config=configDefaults,module.exports.stream=stream;
